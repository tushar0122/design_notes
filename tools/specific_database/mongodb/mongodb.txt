MongoDB
When to use 
1. Schema Flexibility
    => Your data model evolves frequently (e.g., startups, prototyping).
    => Different documents in a collection can have different fields.
2. Document-Oriented Data
    => Your data fits naturally as JSON-like documents (BSON).
    => You need to store nested objects, arrays, and hierarchical structures.
3. High Write Throughput & Performance
    => You need high write speed with horizontal scaling.
    => You prefer eventual consistency over strict ACID guarantees.
4. Horizontal Scalability
    => You expect big data volumes and want to scale easily.
    => You want automatic sharding to distribute data across nodes.

When Not to Use MongoDB
You need multi-row ACID transactions across collections.
You rely on complex joins and relational integrity.
You’re doing heavy aggregations over massive structured datasets (better suited to SQL or columnar stores).
You need real-time analytics (consider Apache Druid, ClickHouse, or BigQuery instead).


Read Preference	Consistency	Description
primary (default)	✅ Strong	Always reads from primary (latest confirmed data)
primaryPreferred	⚠️ Mostly strong	Primary if available; otherwise, possibly stale secondary
secondary	❌ Eventually	May return stale data (secondary lag possible)
secondaryPreferred	❌ Eventually	Uses secondary unless unavailable
nearest	❌ Eventually	Fastest node, could be stale
