Cassandra
    => Data Structure 
        => Tables, rows, Partitions, Clustering keys 
    => Schema
        => Wide-column store (table-like with flexible columns)
        => Semi structured
        => Schema required for tables
        => Primary Key = Partitioning Key + Clustering Key
        => Column Addition doesn't require schema change, directly insert new column
        => Each row can have different set of columns 
    => Querying 
        => CQL Language is used 
        => Adhoc query not supported (Only filtering in primary keys and indexed column possible, Must design your table specifically for the queries to run)
        => No Joins 
    => Performance
        => 
    => Usecase 
        => Not for complex joins 
        => Your app is write-heavy (e.g. logs, metrics)
        => Not for frequent Updates
        => Real time high writes 

Self Managed
    => Scalability
        => Horizontally Scalable
            => Sharding Native, Seamless Easy
    => Architecture
        => Masterless (Peer-to-Peer)
    => Fault Tolerance 
        => 	Very high — no single point of failure
    => Focus 
        => High availability, fast writes, scalability
    => Design Approach
        => Query-first, denormalized
    => Internal Working
        => Write 
            => It doesn’t update existing rows on disk — it appends new data.
        => Read 
            => 
    
Advantages & Why 
    => Faster Read 
        => It is append only sequentially, immutable

Disadvantages & Why 
    => Not for frequent updates 
        => It is append only database, memory piles up

Alternative Fully Managed 
    => Amazon KeySpaces